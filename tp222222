#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <netdb.h>
//argv: Tableau de chaînes de caractères représentant les arguments de la ligne de commande.
int main(int argc, char *argv[]) {
    const char *hostname = argv[1];//Contient le nom d'hôte passé en tant qu'argument de la ligne de commande.
    const char *port = argv[2];//Contient le numéro de port passé en tant qu'argument de la ligne de commande
// Initialisation de la structure addrinfo
    
    struct addrinfo hints, *res;
    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;//Spécifie que le programme prend en charge à la fois IPv4 et IPv6 (AF_UNSPEC).
    hints.ai_socktype = SOCK_DGRAM; // Ou SOCK_STREAM selon le besoin

    int status = getaddrinfo(hostname, port, &hints, &res);
    if (status != 0) {
        fprintf(stderr, "Erreur lors de la résolution du nom : %s\n", gai_strerror(status));
        exit(EXIT_FAILURE);
    }
    struct sockaddr *addr = res->ai_addr;
    // Afficher l'adresse IP résultante
    char ipstr[INET6_ADDRSTRLEN];
    void *addr_ptr;

    if (addr->sa_family == AF_INET) {
        struct sockaddr_in *ipv4 = (struct sockaddr_in *)addr;
        addr_ptr = &(ipv4->sin_addr);
    } else {
        struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *)addr;
        addr_ptr = &(ipv6->sin6_addr);
    }
//pour convertir l'adresse IP binaire en une chaîne de caractères lisible.
    inet_ntop(addr->sa_family, addr_ptr, ipstr, sizeof ipstr);
    printf("Adresse IP du serveur : %s\n", ipstr);

    // N'oubliez pas de libérer la mémoire allouée par getaddrinfo
    freeaddrinfo(res);

    return 0;
}
